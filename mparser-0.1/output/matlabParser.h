/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:45:30
 *
 *     -  From the grammar source file : /home/wingated/projects/sm/parser/matlab.g
 *     -                            On : 2011-09-01 16:55:30
 *     -                for the parser : matlabParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser matlabParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pmatlabParser, which is returned from a call to matlabParserNew().
 *
 * The methods in pmatlabParser are  as follows:
 *
 *  - matlabParser_hidden_nl_return      pmatlabParser->hidden_nl(pmatlabParser)
 *  - matlabParser_nloc_return      pmatlabParser->nloc(pmatlabParser)
 *  - matlabParser_nlos_return      pmatlabParser->nlos(pmatlabParser)
 *  - matlabParser_mfile_return      pmatlabParser->mfile(pmatlabParser)
 *  - matlabParser_scriptfile_return      pmatlabParser->scriptfile(pmatlabParser)
 *  - matlabParser_program_return      pmatlabParser->program(pmatlabParser)
 *  - matlabParser_function_definition_return      pmatlabParser->function_definition(pmatlabParser)
 *  - matlabParser_function_return_return      pmatlabParser->function_return(pmatlabParser)
 *  - matlabParser_func_or_statement_return      pmatlabParser->func_or_statement(pmatlabParser)
 *  - matlabParser_func_or_statement_list_return      pmatlabParser->func_or_statement_list(pmatlabParser)
 *  - matlabParser_statement_list_return      pmatlabParser->statement_list(pmatlabParser)
 *  - matlabParser_parameter_list_return      pmatlabParser->parameter_list(pmatlabParser)
 *  - matlabParser_statement_return      pmatlabParser->statement(pmatlabParser)
 *  - matlabParser_nlosoc_return      pmatlabParser->nlosoc(pmatlabParser)
 *  - matlabParser_lhs_return      pmatlabParser->lhs(pmatlabParser)
 *  - matlabParser_rhs_return      pmatlabParser->rhs(pmatlabParser)
 *  - matlabParser_if_statement_return      pmatlabParser->if_statement(pmatlabParser)
 *  - matlabParser_elseif_statement_return      pmatlabParser->elseif_statement(pmatlabParser)
 *  - matlabParser_else_statement_return      pmatlabParser->else_statement(pmatlabParser)
 *  - matlabParser_for_statement_return      pmatlabParser->for_statement(pmatlabParser)
 *  - matlabParser_while_statement_return      pmatlabParser->while_statement(pmatlabParser)
 *  - matlabParser_switch_statement_return      pmatlabParser->switch_statement(pmatlabParser)
 *  - matlabParser_case_statement_return      pmatlabParser->case_statement(pmatlabParser)
 *  - matlabParser_otherwise_statement_return      pmatlabParser->otherwise_statement(pmatlabParser)
 *  - matlabParser_try_statement_return      pmatlabParser->try_statement(pmatlabParser)
 *  - matlabParser_catch_statement_return      pmatlabParser->catch_statement(pmatlabParser)
 *  - matlabParser_return_statement_return      pmatlabParser->return_statement(pmatlabParser)
 *  - matlabParser_break_statement_return      pmatlabParser->break_statement(pmatlabParser)
 *  - matlabParser_continue_statement_return      pmatlabParser->continue_statement(pmatlabParser)
 *  - matlabParser_global_statement_return      pmatlabParser->global_statement(pmatlabParser)
 *  - matlabParser_persistent_statement_return      pmatlabParser->persistent_statement(pmatlabParser)
 *  - matlabParser_clear_statement_return      pmatlabParser->clear_statement(pmatlabParser)
 *  - matlabParser_g1_return      pmatlabParser->g1(pmatlabParser)
 *  - matlabParser_g2_return      pmatlabParser->g2(pmatlabParser)
 *  - matlabParser_g3_return      pmatlabParser->g3(pmatlabParser)
 *  - matlabParser_g4_return      pmatlabParser->g4(pmatlabParser)
 *  - matlabParser_postfix_operator_return      pmatlabParser->postfix_operator(pmatlabParser)
 *  - matlabParser_prefix_operator_return      pmatlabParser->prefix_operator(pmatlabParser)
 *  - matlabParser_expression_return      pmatlabParser->expression(pmatlabParser)
 *  - matlabParser_e0_return      pmatlabParser->e0(pmatlabParser)
 *  - matlabParser_e1_return      pmatlabParser->e1(pmatlabParser)
 *  - matlabParser_e2_return      pmatlabParser->e2(pmatlabParser)
 *  - matlabParser_e3_return      pmatlabParser->e3(pmatlabParser)
 *  - matlabParser_e4_return      pmatlabParser->e4(pmatlabParser)
 *  - matlabParser_e5_return      pmatlabParser->e5(pmatlabParser)
 *  - matlabParser_e6_return      pmatlabParser->e6(pmatlabParser)
 *  - matlabParser_e7_return      pmatlabParser->e7(pmatlabParser)
 *  - matlabParser_e8_return      pmatlabParser->e8(pmatlabParser)
 *  - matlabParser_e9_return      pmatlabParser->e9(pmatlabParser)
 *  - matlabParser_e10_return      pmatlabParser->e10(pmatlabParser)
 *  - matlabParser_e11_return      pmatlabParser->e11(pmatlabParser)
 *  - matlabParser_unary_expression_return      pmatlabParser->unary_expression(pmatlabParser)
 *  - matlabParser_base_expression_return      pmatlabParser->base_expression(pmatlabParser)
 *  - matlabParser_anon_func_handle_return      pmatlabParser->anon_func_handle(pmatlabParser)
 *  - matlabParser_id_plus_indexers_return      pmatlabParser->id_plus_indexers(pmatlabParser)
 *  - matlabParser_function_parameter_list_return      pmatlabParser->function_parameter_list(pmatlabParser)
 *  - matlabParser_function_parameter_return      pmatlabParser->function_parameter(pmatlabParser)
 *  - matlabParser_matrix_return      pmatlabParser->matrix(pmatlabParser)
 *  - matlabParser_cell_return      pmatlabParser->cell(pmatlabParser)
 *  - matlabParser_vector_return      pmatlabParser->vector(pmatlabParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_matlabParser_H
#define _matlabParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct matlabParser_Ctx_struct matlabParser, * pmatlabParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct matlabParser_hidden_nl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_hidden_nl_return;

typedef struct matlabParser_nloc_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_nloc_return;

typedef struct matlabParser_nlos_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_nlos_return;

typedef struct matlabParser_mfile_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_mfile_return;

typedef struct matlabParser_scriptfile_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_scriptfile_return;

typedef struct matlabParser_program_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_program_return;

typedef struct matlabParser_function_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_function_definition_return;

typedef struct matlabParser_function_return_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_function_return_return;

typedef struct matlabParser_func_or_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_func_or_statement_return;

typedef struct matlabParser_func_or_statement_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_func_or_statement_list_return;

typedef struct matlabParser_statement_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_statement_list_return;

typedef struct matlabParser_parameter_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_parameter_list_return;

typedef struct matlabParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_statement_return;

typedef struct matlabParser_nlosoc_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_nlosoc_return;

typedef struct matlabParser_lhs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_lhs_return;

typedef struct matlabParser_rhs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_rhs_return;

typedef struct matlabParser_if_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_if_statement_return;

typedef struct matlabParser_elseif_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_elseif_statement_return;

typedef struct matlabParser_else_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_else_statement_return;

typedef struct matlabParser_for_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_for_statement_return;

typedef struct matlabParser_while_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_while_statement_return;

typedef struct matlabParser_switch_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_switch_statement_return;

typedef struct matlabParser_case_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_case_statement_return;

typedef struct matlabParser_otherwise_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_otherwise_statement_return;

typedef struct matlabParser_try_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_try_statement_return;

typedef struct matlabParser_catch_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_catch_statement_return;

typedef struct matlabParser_return_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_return_statement_return;

typedef struct matlabParser_break_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_break_statement_return;

typedef struct matlabParser_continue_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_continue_statement_return;

typedef struct matlabParser_global_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_global_statement_return;

typedef struct matlabParser_persistent_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_persistent_statement_return;

typedef struct matlabParser_clear_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_clear_statement_return;

typedef struct matlabParser_g1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_g1_return;

typedef struct matlabParser_g2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_g2_return;

typedef struct matlabParser_g3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_g3_return;

typedef struct matlabParser_g4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_g4_return;

typedef struct matlabParser_postfix_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_postfix_operator_return;

typedef struct matlabParser_prefix_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_prefix_operator_return;

typedef struct matlabParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_expression_return;

typedef struct matlabParser_e0_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_e0_return;

typedef struct matlabParser_e1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_e1_return;

typedef struct matlabParser_e2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_e2_return;

typedef struct matlabParser_e3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_e3_return;

typedef struct matlabParser_e4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_e4_return;

typedef struct matlabParser_e5_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_e5_return;

typedef struct matlabParser_e6_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_e6_return;

typedef struct matlabParser_e7_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_e7_return;

typedef struct matlabParser_e8_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_e8_return;

typedef struct matlabParser_e9_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_e9_return;

typedef struct matlabParser_e10_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_e10_return;

typedef struct matlabParser_e11_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_e11_return;

typedef struct matlabParser_unary_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_unary_expression_return;

typedef struct matlabParser_base_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_base_expression_return;

typedef struct matlabParser_anon_func_handle_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_anon_func_handle_return;

typedef struct matlabParser_id_plus_indexers_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_id_plus_indexers_return;

typedef struct matlabParser_function_parameter_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_function_parameter_list_return;

typedef struct matlabParser_function_parameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_function_parameter_return;

typedef struct matlabParser_matrix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_matrix_return;

typedef struct matlabParser_cell_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_cell_return;

typedef struct matlabParser_vector_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    matlabParser_vector_return;



/** Context tracking structure for matlabParser
 */
struct matlabParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     matlabParser_hidden_nl_return (*hidden_nl)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_nloc_return (*nloc)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_nlos_return (*nlos)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_mfile_return (*mfile)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_scriptfile_return (*scriptfile)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_program_return (*program)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_function_definition_return (*function_definition)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_function_return_return (*function_return)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_func_or_statement_return (*func_or_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_func_or_statement_list_return (*func_or_statement_list)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_statement_list_return (*statement_list)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_parameter_list_return (*parameter_list)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_statement_return (*statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_nlosoc_return (*nlosoc)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_lhs_return (*lhs)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_rhs_return (*rhs)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_if_statement_return (*if_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_elseif_statement_return (*elseif_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_else_statement_return (*else_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_for_statement_return (*for_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_while_statement_return (*while_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_switch_statement_return (*switch_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_case_statement_return (*case_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_otherwise_statement_return (*otherwise_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_try_statement_return (*try_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_catch_statement_return (*catch_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_return_statement_return (*return_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_break_statement_return (*break_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_continue_statement_return (*continue_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_global_statement_return (*global_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_persistent_statement_return (*persistent_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_clear_statement_return (*clear_statement)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_g1_return (*g1)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_g2_return (*g2)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_g3_return (*g3)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_g4_return (*g4)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_postfix_operator_return (*postfix_operator)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_prefix_operator_return (*prefix_operator)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_expression_return (*expression)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_e0_return (*e0)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_e1_return (*e1)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_e2_return (*e2)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_e3_return (*e3)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_e4_return (*e4)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_e5_return (*e5)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_e6_return (*e6)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_e7_return (*e7)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_e8_return (*e8)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_e9_return (*e9)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_e10_return (*e10)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_e11_return (*e11)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_unary_expression_return (*unary_expression)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_base_expression_return (*base_expression)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_anon_func_handle_return (*anon_func_handle)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_id_plus_indexers_return (*id_plus_indexers)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_function_parameter_list_return (*function_parameter_list)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_function_parameter_return (*function_parameter)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_matrix_return (*matrix)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_cell_return (*cell)	(struct matlabParser_Ctx_struct * ctx);
     matlabParser_vector_return (*vector)	(struct matlabParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred1_matlab)	(struct matlabParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct matlabParser_Ctx_struct * ctx);
    void	    (*free)   (struct matlabParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pmatlabParser matlabParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pmatlabParser matlabParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define PROGRAM      4
#define FUNCTION      5
#define FUNCTION_RETURN      6
#define PARAMETER_LIST      7
#define FUNCTION_PARAMETER_LIST      8
#define STATEMENT_LIST      9
#define EXPRESSION      10
#define EXPR_STMT      11
#define NULL_STMT      12
#define ASSIGN      13
#define APPLY      14
#define FIELDACCESS      15
#define DYNFIELDACCESS      16
#define CELLACCESS      17
#define MATRIX      18
#define VECTOR      19
#define CELL      20
#define CLEAR      21
#define LHS      22
#define RHS      23
#define ID_NODE      24
#define PARENS      25
#define COMMA      26
#define SEMI      27
#define ID      28
#define END      29
#define EQ      30
#define LSBRACE      31
#define RSBRACE      32
#define LPAREN      33
#define RPAREN      34
#define IF      35
#define ELSEIF      36
#define ELSE      37
#define FOR      38
#define WHILE      39
#define SWITCH      40
#define CASE      41
#define OTHERWISE      42
#define TRY      43
#define CATCH      44
#define RETURNS      45
#define BREAK      46
#define CONTINUE      47
#define GLOBAL      48
#define PERSISTENT      49
#define NEQ      50
#define DOUBLE_EQ      51
#define GRTE      52
#define GRT      53
#define LSTE      54
#define LST      55
#define PLUS      56
#define MINUS      57
#define LEFTDIV      58
#define RIGHTDIV      59
#define TIMES      60
#define EL_LEFTDIV      61
#define EL_RIGHTDIV      62
#define EL_TIMES      63
#define EXP      64
#define EL_EXP      65
#define CCT      66
#define EL_CCT      67
#define NEG      68
#define LOG_OR      69
#define LOG_AND      70
#define BIN_OR      71
#define BIN_AND      72
#define COLON      73
#define INT      74
#define FLOAT      75
#define STRING      76
#define AT      77
#define DOT      78
#define LBRACE      79
#define RBRACE      80
#define VARARGIN      81
#define ENDS      82
#define NL      83
#define LINECOMMENT      84
#define THREEDOTS      85
#define EXPONENT      86
#define ESC_SEQ      87
#define WS      88
#define HEX_DIGIT      89
#define UNICODE_ESC      90
#define OCTAL_ESC      91
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for matlabParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
